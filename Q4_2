class QuickUnion{
	public int[] ele;
	public int[] id;
	public int count;
	public int[][] dist;
	public int t;
		
	public QuickUnion(int N){
		count = N;
		id = new int[N+1];
		ele = new int[N+1];
		dist = new int[N+1][N+1];
		for(int i = 0; i<N+1; i++){
			id[i] = i;
			ele[i] = i;
		}
	}
	
	public int root(int i){
		t = ele[i];
		while(id[t]!=id[id[t]])
			t = id[id[t]];
		return t;
	}
	
	public boolean isConnected(int a, int b){
		return root(a) == root(b);
	}
	
	public boolean isFeasible(int a, int b){
		if(!this.isConnected(a, b))
			return false;
		else if(dist[a][b]!=0)
			return dist[a][b]>0;
		else{
			while(id[a]!=b){
				if(dist[a][id[a]]>0)
					a = id[a];
				else
					return false;
			}
			if(dist[a][id[a]]>0)
				return true;
			else
				return false;
		}
	}
			
			
	public void union(int a, int b){
		id[a] = id[b];
		dist[a][b] = 1;
		dist[b][a] = -1;
	}
}
public class Q4_2 {
	public static void main(String[] args){
		QuickUnion UF = new QuickUnion(7);
		UF.union(1, 2);
		UF.union(2, 5);
		UF.union(5, 7);
		UF.union(7, 6);
		UF.union(3, 6);
		UF.union(1, 3);
		UF.union(1, 4);
		UF.union(2, 4);
		UF.union(5, 4);
		UF.union(4, 7);
		UF.union(4, 6);
		UF.union(4, 3);
		System.out.print(UF.isFeasible(1,6));		
	}
}
