class QuickUnion{
class QuickUnion{
	public int[][] dist;
	int N;
	
	public QuickUnion(int N){
		this.N = N;
		dist = new int[N+1][N+1];
	}
	
	public void union(int a, int b){
		dist[a][b] = 1;
		dist[b][a] = -1;
	}
	
	public boolean isConnected(int a, int b){
		if(dist[a][b]!=0)
			return dist[a][b]>0;
		else{
			for(int i = 0; i<N+1; i++){
				if(dist[a][i]!=0)
					return this.isConnected(i, b);
				else
					continue;
			}
		}
		return false;
	}
}
public class Q4_2 {
	public static void main(String[] args){
		QuickUnion UF = new QuickUnion(7);
		UF.union(1, 2);
		UF.union(2, 5);
		UF.union(5, 7);
		UF.union(7, 6);
		UF.union(3, 6);
		UF.union(1, 3);
		UF.union(1, 4);
		UF.union(2, 4);
		UF.union(5, 4);
		UF.union(4, 7);
		UF.union(4, 6);
		UF.union(4, 3);
		System.out.print(UF.isConnected(1,5));		
	}
}
