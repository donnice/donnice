import java.util.ArrayList;

class BiTreeNode{
	public Object data;
	public BiTreeNode lt,rt;
	public BiTreeNode(){
		this(null);
	}
	public BiTreeNode(Object data){
		this(data,null,null);
	}
	public BiTreeNode(Object data,BiTreeNode lt,BiTreeNode rt){
		this.data = data;
		this.lt = lt;
		this.rt = rt;
	}
	public Object getData(){
		return data;
	}
	public void setData(Object data){
		this.data = data;
	}
	public BiTreeNode getLChild(){
		return lt;
	}
	public void setLChild(BiTreeNode lt){
		this.lt = lt;
	}
	public BiTreeNode getRChild(){
		return rt;
	}
	public void setRChild(BiTreeNode rt){
		this.rt = rt;
	}
}

class BisTree{
	private BiTreeNode root;
		
	public BisTree(){
		this.root = null;
	}
	public BisTree(BiTreeNode root){
		this.root = root;
	}
	public void insert(int x){
		root = insert(x,root);
	}
	public BiTreeNode insert(int x, BiTreeNode t){
		if(t == null)
			return new BiTreeNode(x,null,null);
		int compareResult = String.valueOf(x).compareTo(String.valueOf(t.data));
		if(compareResult<0)
			t.lt = insert(x, t.lt);
		else if(compareResult>0)
			t.rt = insert(x, t.rt);
		else
			;
		return t;
	}
	
	public int getHeight(BiTreeNode node){
		if(node == null)
			return 0;
		int height = 1;
		if(node.lt!=null)
			height = 1+getHeight(node.lt);
		if(node.rt!=null){
			int h = 1+getHeight(node.rt);
			height = height>h? height:h;
		}
		return height;
	}
	
	public boolean isBalance(BiTreeNode node){
		if(node == null)
			return true;
		int left = getHeight(node.lt);
		int right = getHeight(node.rt);
		int diff = left - right;
		if(diff>1 || diff<-1)
			return false;
		return isBalance(node.lt) && isBalance(node.rt);
	}
	
				
	public void printTree(BiTreeNode t, ArrayList<Object> a){
		if(t!=null){
			a.add(t.getData());
			printTree(t.getLChild(),a);
			printTree(t.getRChild(),a);
		}
	}
	
}
public class Q4_9 {
	public static BiTreeNode thePublicNode(BiTreeNode t1, BiTreeNode t2){
		if(t1!=null && t1.getData()!=t2.getData()){
			if((int)(t1.getData())>(int)(t2.getData()))
				return thePublicNode(t1.lt, t2);
			else
				return thePublicNode(t1.rt, t2);
		}
		if(t1.getData() == t2.getData())
			return t1;
		else
			return null;
	}
	
	public static boolean isSame(ArrayList<Object> a, ArrayList<Object> b){
		if(a.size()!=b.size())
			return false;
		for(int i = 0; i<a.size(); i++){
			if(a.get(i)!=b.get(i))
					return false;
		}
		return true;
	}
	
		
	public static void main(String[] args){
		BiTreeNode t = new BiTreeNode(5);
		int[] a = {2,1,4,3,8,7,6};
		BisTree b = new BisTree(t);
		for(int i = 0;i<a.length;i++)
			b.insert(a[i],t);
		BiTreeNode t2 = new BiTreeNode(2);
		BisTree b2 = new BisTree(t2);
		int[] a2 = {1,4,3,0};
		for(int i = 0; i<a2.length; i++)
			b2.insert(a2[i],t2);
		BiTreeNode t3 = thePublicNode(t,t2);
		ArrayList<Object> c = new ArrayList<Object>();
		ArrayList<Object> d = new ArrayList<Object>();
		b.printTree(t3, c);
		b2.printTree(t2, d);
		System.out.print(isSame(c,d));
	}
}
